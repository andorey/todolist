{"version":3,"sources":["TodoListHeader.jsx","TodoListTask.jsx","TodoListTasks.jsx","TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","state","error","title","onAddTaskClick","newTitle","_this","trim","setState","props","addTask","onTaskTitleChanged","e","currentTarget","value","oneAddTaskKeyPress","key","render","react_default","a","createElement","className","ref","newTaskTitleRef","type","placeholder","onChange","onKeyPress","onClick","React","Component","TodoListTask","editMode","activatedEditMode","deactivateEditMode","onIsDoneChanged","change","task","id","checked","onTitleChanged","changeTitle","taskClass","isDone","onBlur","autoFocus","priority","TodoListTasks","tasksElements","tasks","map","t","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","onChangeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","App","nextTaskId","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","forEach","newTask","newTasks","concat","Object","toConsumableArray","changeFilterValue","newFilterValue","changeTaskStatus","taskId","changeTask","newPropsObj","_objectSpread","src_TodoListHeader","src_TodoListTasks","filter","src_TodoListFooter","this","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d699969a.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoListHeader extends React.Component {\n\n\tstate = {\n\t\terror: false,\n\t\ttitle: \"\"\n\t};\n\n\tonAddTaskClick = () => {\n\t\tlet newTitle = this.state.title;\n\t\tif (newTitle.trim() === ''){\n\t\t\tthis.setState({error:true});\n\t\t}else{\n\t\tthis.setState({error: false});\n\t\tthis.setState({title: \"\"});\n\t\tthis.props.addTask(newTitle);\n\t\t}\n\t};\n\n\tonTaskTitleChanged = (e) => {\n\t\tthis.setState({\n\t\t\terror: false,\n\t\t\ttitle: e.currentTarget.value\n\t\t})\n\t};\n\n\n\toneAddTaskKeyPress = (e) => {\n\t\tif(e.key === 'Enter'){\n\t\t\tthis.onAddTaskClick();\n\t\t}\n\t};\n\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className=\"todoList-header\">\n\t\t\t\t<h3 className=\"todoList-header__title\">What to Learn</h3>\n\t\t\t\t<div className=\"todoList-newTaskForm\">\n\t\t\t\t\t<input ref={this.newTaskTitleRef}\n\t\t\t\t\t\t   type=\"text\"\n\t\t\t\t\t\t   placeholder=\"New task name\"\n\t\t\t\t\t\t   className={this.state.error ? \"error\" : ''}\n\t\t\t\t\t\t   onChange={this.onTaskTitleChanged}\n\t\t\t\t\t\t   onKeyPress={this.oneAddTaskKeyPress}\n\t\t\t\t\t\t   value={this.state.title}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={this.onAddTaskClick}>Add</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nimport './App.css';\n\n\nclass TodoListTask extends React.Component {\n\n\tstate ={\n\t\teditMode: false\n\t};\n\n\tactivatedEditMode = () => {\n\t\tthis.setState({editMode: true})\n\t};\n\tdeactivateEditMode = () => {\n\t\tthis.setState({editMode: false})\n\t};\n\n\n\tonIsDoneChanged = (e) => {\n\t\tthis.props.change(this.props.task.id, e.currentTarget.checked);\n\t};\n\n\tonTitleChanged = (e) => {\n\t\tthis.props.changeTitle(this.props.task.id, e.currentTarget.value);\n\t};\n\n\trender = () => {\n\n\t\tconst taskClass = this.props.task.isDone ? 'todoList-task done' : 'todoList-task';\n\n\t\treturn (\n\t\t\t<div className={taskClass}>\n\t\t\t\t<input onClick={this.onIsDoneChanged} type=\"checkbox\"\n\t\t\t\t\t   checked={this.props.task.isDone}/>\n\t\t\t\t{this.state.editMode\n\t\t\t\t\t? <input\n\t\t\t\t\t\tonBlur={this.deactivateEditMode}\n\t\t\t\t\t\tautoFocus={true}\n\t\t\t\t\t\tvalue={this.props.task.title}\n\t\t\t\t\t\tonChange={this.onTitleChanged}\n\t\t\t\t\t/> :\n\t\t\t\t\t<span onClick={this.activatedEditMode}>\n\t\t\t\t\t\t{this.props.task.id} - {this.props.task.title}\n\t\t\t\t\t</span>\n\t\t\t\t}, priority: {this.props.task.priority}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n\trender = (props) => {\n\n\t\tlet tasksElements = this.props.tasks.map(t => {\n\t\t\t\treturn <TodoListTask\n\t\t\t\t\ttask={t}\n\t\t\t\t\tchange={this.props.change}\n\t\t\t\t\tchangeTitle={this.props.changeTitle}\n\t\t\t\t/>}\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"todoList-tasks\">\n\t\t\t\t{tasksElements}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: true\n    }\n\n\n    onAllFilterClick = () => {this.props.onChangeFilter('All')};\n    onCompletedFilterClick = () => {this.props.onChangeFilter('Completed')};\n    onActiveFilterClick = () => {this.props.onChangeFilter('Active')};\n    onShowFiltersClick = () => {this.setState({isHidden: true})};\n    onHideFiltersClick = () => {this.setState({isHidden: false})};\n\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === 'All' ? 'filter-active': '';\n        let classForCompleted = this.props.filterValue === 'Completed' ? 'filter-active': '';\n        let classForActive = this.props.filterValue === 'Active' ? 'filter-active': '';\n\n        return (\n                <div className=\"todoList-footer\">\n                    {this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick } className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                    </div>}\n                    { !this.state.isHidden && <span onClick={this.onShowFiltersClick}> show </span>}\n                    { this.state.isHidden && <span onClick={this.onHideFiltersClick}> hide </span>}\n                </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\n\nclass App extends React.Component {\n\n\tstate = {\n\t\ttasks: [],\n\t\tfilterValue: 'All'\n\t};\n\n\tnextTaskId = 0;\n\n\tsaveState = () => {\n\t\tlet stateAsString = JSON.stringify(this.state);\n\t\tlocalStorage.setItem('our-state', stateAsString);\n\t};\n\n\trestoreState = () => {\n\t\tlet state = {\n\t\t\ttasks: [],\n\t\t\tfilterValue: 'All'\n\t\t};\n\t\tlet stateAsString = localStorage.getItem('our-state');\n\t\tif(stateAsString !== null){\n\t\t\tstate = JSON.parse(stateAsString);\n\t\t}\n\t\tthis.setState(state, () => {this.state.tasks.forEach(t => {\n\t\t\tif(t.id >= this.nextTaskId){\n\t\t\t\tthis.nextTaskId = t.id + 1;\n\t\t\t}\n\t\t})});\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.restoreState();\n\t};\n\n\n\taddTask = (newTitle) => {\n\t\tlet newTask = {\n\t\t\tid: this.nextTaskId,\n\t\t\ttitle: newTitle,\n\t\t\tisDone: false,\n\t\t\tpriority: 'high'\n\t\t};\n\t\tthis.nextTaskId++;\n\t\tlet newTasks = [...this.state.tasks, newTask];\n\t\tthis.setState({\n\t\t\ttasks: newTasks\n\t\t}, this.saveState);\n\t};\n\n\tchangeFilterValue = (newFilterValue) => {\n\t\tthis.setState({\n\t\t\tfilterValue: newFilterValue\n\t\t}, this.saveState);\n\t};\n\n\tchangeTaskStatus = (taskId, isDone) => {\n\t\tthis.changeTask(taskId, {isDone:  isDone})\n\t};\n\n\tchangeTitle = (taskId, newTitle) => {\n\t\tthis.changeTask(taskId, {title: newTitle})\n\t};\n\n\n\tchangeTask = (taskId, newPropsObj) => {\n\t\tlet newTasks = this.state.tasks.map(t => {\n\t\t\tif (t.id !== taskId) {\n\t\t\t\treturn t;\n\t\t\t} else {\n\t\t\t\treturn {...t, ...newPropsObj}\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\ttasks: newTasks\n\t\t}, this.saveState);\n\t};\n\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"todoList\">\n\t\t\t\t\t<TodoListHeader addTask={this.addTask}/>\n\t\t\t\t\t<TodoListTasks\n\t\t\t\t\t\tchange={this.changeTaskStatus}\n\t\t\t\t\t\tchangeTitle={this.changeTitle}\n\t\t\t\t\t\ttasks={this.state.tasks.filter(t => {\n\t\t\t\t\t\t\t\tif (this.state.filterValue === 'All') {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (this.state.filterValue === 'Active') {\n\t\t\t\t\t\t\t\t\treturn !t.isDone;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (this.state.filterValue === 'Completed') {\n\t\t\t\t\t\t\t\t\treturn t.isDone;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}/>\n\t\t\t\t\t<TodoListFooter filterValue={this.state.filterValue}\n\t\t\t\t\t\t\t\t\tonChangeFilter={this.changeFilterValue}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}