{"version":3,"sources":["TodoListHeader.jsx","TodoListTask.jsx","TodoListTasks.jsx","TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","onAddTaskClick","newTitle","newTaskTitleRef","current","value","setState","addTask","render","react_default","a","createElement","className","ref","type","placeholder","onClick","React","createRef","Component","TodoListTask","onIsDoneChanged","e","change","task","currentTarget","checked","isDone","title","priority","TodoListTasks","tasksElements","tasks","map","t","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","onChangeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","App","newTask","newTasks","concat","toConsumableArray","changeFilterValue","newFilterValue","changeTaskStatus","_objectSpread","src_TodoListHeader","src_TodoListTasks","filter","src_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.335a17a6.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoListHeader extends React.Component {\n\n\tstate = {\n\t\terror: false\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.newTaskTitleRef = React.createRef();\n\t};\n\n\tonAddTaskClick = () => {\n\t\tlet newTitle = this.newTaskTitleRef.current.value;\n\t\tif (newTitle === ''){\n\t\t\tthis.setState({error:true});\n\t\t}else{\n\t\tthis.setState({error: false});\n\t\tthis.newTaskTitleRef.current.value = '';\n\t\tthis.props.addTask(newTitle);\n\t\t}\n\t}\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className=\"todoList-header\">\n\t\t\t\t<h3 className=\"todoList-header__title\">What to Learn</h3>\n\t\t\t\t<div className=\"todoList-newTaskForm\">\n\t\t\t\t\t<input ref={this.newTaskTitleRef}\n\t\t\t\t\t\t   type=\"text\"\n\t\t\t\t\t\t   placeholder=\"New task name\"\n\t\t\t\t\t\t   className={this.state.error ? \"error\" : ''}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={this.onAddTaskClick}>Add</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nimport './App.css';\n\n\nclass TodoListTask extends React.Component {\n\n\tonIsDoneChanged = (e) => {\n\t\tthis.props.change(this.props.task, e.currentTarget.checked);\n\t}\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className=\"todoList-task\">\n\t\t\t\t<input onClick={this.onIsDoneChanged} type=\"checkbox\"\n\t\t\t\t\t   checked={this.props.task.isDone}/>\n\t\t\t\t<span>{this.props.task.title}, priority: {this.props.task.priority}</span>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n\trender = () => {\n\n\t\tlet tasksElements = this.props.tasks.map(t => {\n\t\t\t\treturn <TodoListTask\n\t\t\t\t\ttask={t}\n\t\t\t\t\tchange={this.props.change}\n\t\t\t\t/>\n\t\t\t}\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"todoList-tasks\">\n\t\t\t\t{tasksElements}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: true\n    }\n\n\n    onAllFilterClick = () => {this.props.onChangeFilter('All')};\n    onCompletedFilterClick = () => {this.props.onChangeFilter('Completed')};\n    onActiveFilterClick = () => {this.props.onChangeFilter('Active')};\n    onShowFiltersClick = () => {this.setState({isHidden: true})};\n    onHideFiltersClick = () => {this.setState({isHidden: false})};\n\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === 'All' ? 'filter-active': '';\n        let classForCompleted = this.props.filterValue === 'Completed' ? 'filter-active': '';\n        let classForActive = this.props.filterValue === 'Active' ? 'filter-active': '';\n\n        return (\n                <div className=\"todoList-footer\">\n                    {this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick } className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                    </div>}\n                    { !this.state.isHidden && <span onClick={this.onShowFiltersClick}> show </span>}\n                    { this.state.isHidden && <span onClick={this.onHideFiltersClick}> hide </span>}\n                </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\n\nclass App extends React.Component {\n\n\tstate = {\n\t\ttasks: [\n\t\t\t{title: 'CSS', isDone: true, priority: 'low'},\n\t\t\t{title: 'HTML', isDone: false, priority: 'high'},\n\t\t\t{title: 'React', isDone: false, priority: 'low'},\n\t\t\t{title: 'Angular', isDone: true, priority: 'middle'},\n\t\t],\n\t\tfilterValue: 'All'\n\t};\n\n\taddTask = (newTitle) => {\n\t\tlet newTask = {\n\t\t\ttitle: newTitle,\n\t\t\tisDone: false,\n\t\t\tpriority: 'high'\n\t\t};\n\t\tlet newTasks = [...this.state.tasks, newTask];\n\t\tthis.setState({\n\t\t\ttasks: newTasks\n\t\t})\n\t};\n\n\tchangeFilterValue = (newFilterValue) => {\n\t\tthis.setState({\n\t\t\tfilterValue: newFilterValue\n\t\t})\n\t};\n\n\tchangeTaskStatus = (task, isDone) => {\n\t\tlet newTasks = this.state.tasks.map(t => {\n\t\t\tif (t !== task) {\n\t\t\t\treturn t;\n\t\t\t} else {\n\t\t\t\treturn {...t, isDone: isDone}\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\ttasks: newTasks\n\t\t})\n\t};\n\n\trender = () => {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"todoList\">\n\t\t\t\t\t<TodoListHeader addTask={this.addTask}/>\n\t\t\t\t\t<TodoListTasks change={this.changeTaskStatus}\n\t\t\t\t\t\t\t\t   tasks={this.state.tasks.filter(t => {\n\t\t\t\t\t\t\t\t\t\t   if (this.state.filterValue === 'All') {\n\t\t\t\t\t\t\t\t\t\t\t   return true;\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t\t   if (this.state.filterValue === 'Active') {\n\t\t\t\t\t\t\t\t\t\t\t   return !t.isDone;\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t\t   if (this.state.filterValue === 'Completed') {\n\t\t\t\t\t\t\t\t\t\t\t   return t.isDone;\n\t\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t\t\t   )}/>\n\t\t\t\t\t<TodoListFooter filterValue={this.state.filterValue}\n\t\t\t\t\t\t\t\t\tonChangeFilter={this.changeFilterValue} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}